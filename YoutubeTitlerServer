# By Ada Pluguez
# 4/1/24
# YouTube Title/Description Generator Server Application
from flask import Flask, request, jsonify
import os
import hashlib
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail, Message
import secrets
import logging
import uuid 
import psycopg2
from cryptography.fernet import Fernet, InvalidToken
from flask import current_app
import logging
from sqlalchemy.exc import ProgrammingError
from sqlalchemy.exc import IntegrityError

# PreAppLication Functions Required for intializatonof database.
# Function to create a schema if it does not exist
def create_schema_if_not_exists(schema_name):
    from sqlalchemy import text
    with db.engine.begin() as connection:  # Use begin() to ensure commit
        connection.execute(text(f"CREATE SCHEMA IF NOT EXISTS {schema_name}"))

# Configure basic logger
logging.basicConfig(level=logging.INFO)
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)


# Initialize Flask application
app = Flask(__name__)

# Note: Using a single database to manage both users and registration keys.
# Database configuration from environment variables
#app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'postgresql://user1:new@localhost/youtube_database')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)


# User model in SQLAlchemy - Table1
class User(db.Model):
    __table_args__ = {'schema': 'user_management'}
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    salt = db.Column(db.LargeBinary(32), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    reset = db.Column(db.Boolean, default=False, nullable=False)
    loggedin = db.Column(db.Boolean, default=False)  # Tracks login status

# RegistrationKey model for storing encrypted registration keys - Table3    
class RegistrationKeyEncrypt(db.Model):
    __table_args__ = {'schema': 'user_management'}
    id = db.Column(db.Integer, primary_key=True)
    encrypted_regkey = db.Column(db.String(255), unique=True, nullable=False)
    used = db.Column(db.Boolean, default=False)


def check_and_generate_keysEn():
    if RegistrationKeyEncrypt.query.first() is None:
        success, keys = generate_registration_keysEn()  # Assuming the function returns a status and list of keys.
        if success:
            logging.info(f"Generated {len(keys)} initial keys because none were found in the database.")
        else:
            logging.error("Failed to generate keys.")
    else:
        logging.info("Encrypted registration keys are already present in the database.")

# Set up encryption for registration keys
# Global initialization of Fernet encryption key
encryption_key = os.environ.get('ENCRYPTION_KEY2')
if encryption_key is None:
    # Generate a new key if not found in environment variables
    encryption_key = Fernet.generate_key()
    os.environ['ENCRYPTION_KEY2'] = encryption_key.decode()  # Store key as string in env

cipher_suite = Fernet(encryption_key)

  
# Encrypt a registration key
def encrypt_key(key):
    try:
        encrypted_key = cipher_suite.encrypt(key.encode()).decode()
        return encrypted_key
    except Exception as e:
        logging.error(f"Encryption failed for key {key}: {str(e)}")
        return None


# Decrypt a registration key
def decrypt_key(encrypted_key):
    try:
        return cipher_suite.decrypt(encrypted_key.encode()).decode()
    except InvalidToken:
        logging.error("Decryption failed due to invalid token or key mismatch")
        return None


def generate_registration_keysEn(number_of_keys=1000):
    keys = []
    for _ in range(number_of_keys):
        while True:
            new_key = str(uuid.uuid4())
            encrypted_key = encrypt_key(new_key)  # Encrypt the key
            existing_key = RegistrationKeyEncrypt.query.filter_by(encrypted_regkey=encrypted_key).first()
            if not existing_key:
                break
        key_instance = RegistrationKeyEncrypt(encrypted_regkey=encrypted_key, used=False)
        db.session.add(key_instance)
        keys.append(new_key)  # Storing plaintext key for return, adjust as needed
    
    try:
        db.session.commit()  # Make sure to call commit() correctly
        logging.info(f"Generated {len(keys)} registration keys.")
    except IntegrityError as e:
        db.session.rollback()
        logging.error(f"Failed to generate unique registration keys: {str(e)}")
        return False, 'Error generating unique registration keys'
    
    return True, keys


# Initialize the application, database, and create tables
with app.app_context():
    create_schema_if_not_exists('user_management')
    db.drop_all()
    db.create_all()
    check_and_generate_keysEn()    

# Email configuration for Flask-Mail integration
mail = Mail(app)
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_USERNAME')

  
# API endpoint to generate new registration keys
@app.route('/generate_keysEn', methods=['POST'])
def api_generate_registration_keysEn():
    number_of_keys = request.json.get('count', 10)  # Default to 10 if not specified
    success, keys_or_message = generate_registration_keysEn(number_of_keys)
    if not success:
        return jsonify({'message': keys_or_message}), 500
    return jsonify({'message': 'Registration keys generated successfully', 'keys': keys_or_message}), 201

# API endpoint to list all unused encrypted registration keys
@app.route('/list_unused_keysEn', methods=['GET'])
def list_unused_keysEn():
    unused_keys = RegistrationKeyEncrypt.query.filter_by(used=False).all()
    decrypted_keys = [decrypt_key(key.encrypted_regkey) for key in unused_keys]
    return jsonify(decrypted_keys)

@app.route('/list_all_keysEn', methods=['GET'])
def list_all_keysEn():
    # Query all keys from the database
    keys = RegistrationKeyEncrypt.query.all()
    
    # Create a list of dictionaries containing decrypted keys and their status
    key_info = [
        {'decrypted_key': decrypt_key(key.encrypted_regkey), 'used': key.used}
        for key in keys
    ]
    # Return the list of decrypted keys and their status as a JSON response
    return jsonify(key_info)


# API endpoint to get the next unused encrypted registration key
@app.route('/get_unused_keyEn', methods=['GET'])
def get_unused_keyEn():
    key = RegistrationKeyEncrypt.query.filter_by(used=False).first()
    if key:
        decrypted_key = decrypt_key(key.encrypted_regkey)
        return jsonify({'message': 'Key retrieved successfully', 'key': decrypted_key}), 200
    else:
        return jsonify({'message': 'No unused keys available'}), 404

# Hash password with optional salt
def hash_password(password, salt=None):
    if salt is None:
        salt = os.urandom(32)
    hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return hashed_password, salt

# User registration endpoint
@app.route('/register', methods=['POST'])
def register_user():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')
    encrypted_regkey = data.get('encrypted_regkey')

    logging.info(f"Registering user {username} with key {encrypted_regkey}")

    # Check registration key validity
    key = RegistrationKeyEncrypt.query.filter_by(encrypted_regkey=encrypted_regkey, used=False).first()
    print(key)
    print(encrypted_regkey)
    
    if not key:
        logging.error(f"Registration key not found or already used: {encrypted_regkey}")
        return jsonify({'message': 'Invalid or already used registration key'}), 400

    # Check for existing username
    if User.query.filter_by(username=username).first():
        logging.error("Username already exists")
        return jsonify({'message': 'Username already exists'}), 400

    # Check for existing email
    if User.query.filter_by(email=email).first():
        logging.error("Email already exists")
        return jsonify({'message': 'Email already exists'}), 400

    # Hash and salt password
    password_hash, salt = hash_password(password)
    logging.info(f"Password hashed for user {username}")

    # Create new user
    new_user = User(username=username, email=email, password_hash=password_hash.hex(), salt=salt)
    db.session.add(new_user)

    # Mark registration key as used
    key.used = True
    try:
        db.session.commit()
        logging.info(f"User {username} registered successfully.")
    except Exception as e:
        db.session.rollback()
        logging.error(f"Error in committing user registration: {str(e)}")
        return jsonify({'message': 'Failed to register user due to internal error'}), 500

    return jsonify({'message': 'User successfully registered'}), 201


# User login endpoint
@app.route('/login', methods=['POST'])
def login_user():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    user = User.query.filter_by(username=username).first()
    if user and verify_password(user.password_hash, password, user.salt):
        user.loggedin = True
        db.session.commit()
        return jsonify({'message': 'Login successful'}), 200
    return jsonify({'message': 'Invalid credentials'}), 401
    
@app.route('/list_all_users', methods=['GET'])
def list_all_users():
    # Fetch all users from the database
    users = User.query.all()
    user_data = [{'username': user.username, 'email': user.email, 'loggedin': user.loggedin} for user in users]
    return jsonify(user_data), 200

@app.route('/logout', methods=['POST'])
def logout_user():
    data = request.json
    username = data.get('username')
    user = User.query.filter_by(username=username, loggedin=True).first()
    if user:
        user.loggedin = False
        db.session.commit()
        return jsonify({'message': 'Logout successful'}), 200
    return jsonify({'message': 'User not found or not logged in'}), 404
 
# Function to verify the password
def verify_password(stored_password, provided_password, salt):
    password_hash = hash_password(provided_password, salt)[0]
    return stored_password == password_hash
    
# Function to generate password reset link
def generate_password_reset_link(email):
    token = secrets.token_urlsafe()
    return f"http://yourfrontend/reset?token={token}&email={email}"

# Password reset request endpoint
@app.route('/request_reset', methods=['POST'])
def request_password_reset():
    data = request.json
    email = data.get('email')
    user = User.query.filter_by(email=email).first()
    if not user:
        return jsonify({'message': 'Email not found'}), 404
    reset_link = generate_password_reset_link(email)
    user.reset = True
    db.session.commit()
    msg = Message("Password Reset Request", recipients=[email])
    msg.body = f"Please click the following link to reset your password: {reset_link}"
    mail.send(msg)
    return jsonify({'message': 'Password reset link sent'}), 200

# Password reset endpoint
@app.route('/reset_password', methods=['POST'])
def reset_password():
    data = request.json
    email = data.get('email')
    new_password = data.get('new_password')
    user = User.query.filter_by(email=email).first()
    if not user or not user.reset:
        return jsonify({'message': 'Invalid request or link'}), 400
    user.password_hash, user.salt = hash_password(new_password)
    user.reset = False
    db.session.commit()
    return jsonify({'message': 'Password has been reset successfully'}), 200


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    with app.app_context():
        db.create_all()
    app.run(debug=True)
